/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { setupWorker, rest } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "http://localhost:3333";
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.get(`${baseURL}/api/v1/users/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          email: "Ellsworth20@gmail.com",
          rememberMeToken: faker.lorem.slug(1),
          createdAt: "2022-11-04T22:57:13.396Z",
          updatedAt: "2022-11-04T22:57:13.397Z",
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            rule: "required",
            field: "password",
            message: "row not found",
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/api/v1/users/:id`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: 1,
          email: "Ellsworth20@gmail.com",
          rememberMeToken: faker.lorem.slug(1),
          createdAt: "2022-11-04T22:57:13.396Z",
          updatedAt: "2022-11-04T22:57:13.397Z",
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            rule: "required",
            field: "password",
            message: "row not found",
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/api/v1/users/:id`, (req, res, ctx) => {
    const resultArray = [
      [ctx.status(204), ctx.json({})],
      [
        ctx.status(422),
        ctx.json({
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            rule: "required",
            field: "password",
            message: "row not found",
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/v1/users`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          meta: {
            total: 50,
            perPage: 15,
            currentPage: 1,
            lastPage: 4,
            firstPage: 1,
            firstPageUrl: "/?page=1",
            lastPageUrl: "/?page=4",
            nextPageUrl: "/?page=2",
            previousPageUrl: faker.internet.url(),
          },
          data: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            id: 1,
            email: "Ellsworth20@gmail.com",
            rememberMeToken: faker.lorem.slug(1),
            createdAt: "2022-11-04T22:57:13.396Z",
            updatedAt: "2022-11-04T22:57:13.397Z",
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/v1/users`, (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: 1,
          email: "Ellsworth20@gmail.com",
          rememberMeToken: faker.lorem.slug(1),
          createdAt: "2022-11-04T22:57:13.396Z",
          updatedAt: "2022-11-04T22:57:13.397Z",
        }),
      ],
      [
        ctx.status(422),
        ctx.json({
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map((_) => ({
            rule: "required",
            field: "password",
            message: "row not found",
          })),
        }),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
];

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  if (typeof window === "undefined") {
    const { setupServer } = require("msw/node");
    const server = setupServer(...handlers);
    server.listen();
  } else {
    const worker = setupWorker(...handlers);
    worker.start();
  }
};
